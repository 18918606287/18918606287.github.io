<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Erebos&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://erebos.top/"/>
  <updated>2019-09-02T03:26:06.902Z</updated>
  <id>https://erebos.top/</id>
  
  <author>
    <name>Erebos</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode Solution: #300 Longest Increasing Subsequence</title>
    <link href="https://erebos.top/2019/09/01/LeetCode-Solution-300-Longest-Increasing-Subsequence/"/>
    <id>https://erebos.top/2019/09/01/LeetCode-Solution-300-Longest-Increasing-Subsequence/</id>
    <published>2019-09-01T04:07:18.000Z</published>
    <updated>2019-09-02T03:26:06.902Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>In this article I will describe two <strong>dynamic programming</strong> algorithms solving LIS problem and <strong>STL functions</strong> <code>lower_bound()</code> and <code>upper_bound()</code>.</p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><a id="more"></a><p>Given an unsorted array of integers, find the length of longest increasing subsequence.<br>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: $[10,9,2,5,3,7,101,18]$</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: The longest increasing subsequence is $[2,3,7,101]$, therefore the length is $4$.</span><br></pre></td></tr></table></figure></p><h3 id="Basic-Idea"><a href="#Basic-Idea" class="headerlink" title="Basic Idea"></a>Basic Idea</h3><p>This problem is an optimal problem, so it’s easy to think about dynamic programming method. So we need to construct a state description which has following properties.</p><ol><li>It has <strong>optimal substructure</strong>, which means the optimal solution of the state can be described with its substructure.</li><li>We can find the <strong>state transition equation</strong> easily.</li></ol><h3 id="O-n-2-Dynamic-Programming-Solution"><a href="#O-n-2-Dynamic-Programming-Solution" class="headerlink" title="$O(n^2)$ Dynamic Programming Solution"></a>$O(n^2)$ Dynamic Programming Solution</h3><p>Here is a trivial description that <code>dp[i]</code> means the length of longest increasing subsequence <strong>with $i^{th}$ element.</strong> Also, we can find easily that the value of <code>dp[i]</code> can be determined by all increasing subsequence with $j &lt; i$ that <strong>maintain increasing property</strong> with $i^{th}$ value. Mathematically, <code>dp[i]</code> is determined by all the value <code>dp[j]</code> with $j &lt; i$ and $nums[i] &gt; nums[j]$ which <code>nums</code> is the input vector. So the state transition equation is $dp[i] = max(dp[j]) + 1 with j &lt; i &amp;&amp; nums[j] &lt; nums[i] $<br>This method need two iterations so it’s a $O(n^2)$ algorithm.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLIS</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp(n, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> maximal = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">                <span class="keyword">if</span>(nums[j] &lt; nums[i])</span><br><span class="line">                    maximal = max(maximal, dp[j]);</span><br><span class="line">            dp[i] = maximal + <span class="number">1</span>;</span><br><span class="line">            ret = max(ret, dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="O-nlgn-Dynamic-Programming-Solution"><a href="#O-nlgn-Dynamic-Programming-Solution" class="headerlink" title="$O(nlgn)$ Dynamic Programming Solution"></a>$O(nlgn)$ Dynamic Programming Solution</h3><p>Comparing all optimal subsequences with the same length, the one <strong>with least last number</strong> will confirm that when a new number is added in, the new subsequence will still optimal. For example, for subsequence $[1,3,5,2,7,4,5]$, we have two subsequences length $4$ $[1,3,5,7] and [1,2,4,5]$.<br>Then we add $6$ into the sequence, the first subsequence is still $[1,3,5,7]$ when the second one becomes $[1,2,4,5,6]$.</p><p>But how to guarantee that the subsequence has the least last number? We can do so by replacing the number <strong>just larger than the new number</strong> with the new number. It’s because the replacement won’t change the length of the subsequence but will decrease the number value generally.</p><p>There is a very great property that the increasing subsequences are ‘increasing’, which means that given a increasing subsequence and a new number, we can find the <strong>correct position</strong> of the new number in the subsequence in only $O(lgn)$ time. We can generate a new largest increasing subsequence including the new number by <strong>adding the new number</strong> if it’s larger than all numbers in the subsequence and do replacing if not. The whole time complexity will be $O(nlgn)$.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLIS</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">auto</span> it = lower_bound(dp.begin(), dp.end(), nums[i]);</span><br><span class="line">            <span class="keyword">if</span>(it == dp.end()) dp.push_back(nums[i]);</span><br><span class="line">            <span class="keyword">else</span> *it = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="lower-bound-and-upper-bound-in-STL"><a href="#lower-bound-and-upper-bound-in-STL" class="headerlink" title="lower_bound and upper_bound in STL"></a><code>lower_bound</code> and <code>upper_bound</code> in STL</h3><p>We can mention that I use <code>lower_bound</code> function in the previous code. It’s a binary search function in STL. Both it ans <code>upper_bound</code> use binary search and return a position of a vector. The difference is that <code>lower_bound</code> return the position of the first number larger than <strong>or equals to</strong> the target and <code>upper_bound</code> return the position of the first number <strong>strictly</strong> larger than the target. There are three parameters in both functions. The first parameter is a Iterator refers to the search begin position, the second parameter is a Iterator refers to the end position and the third parameter is target number. Here is the source code of <code>lower_bound</code>.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">ForwardIterator</span>, <span class="title">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">ForwardIterator</span> <span class="title">lower_bound</span> (<span class="title">ForwardIterator</span> <span class="title">first</span>, <span class="title">ForwardIterator</span> <span class="title">last</span>, <span class="title">const</span> <span class="title">T</span>&amp; <span class="title">val</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  ForwardIterator it;</span><br><span class="line">  iterator_traits&lt;ForwardIterator&gt;::difference_type count, step;</span><br><span class="line">  count = distance(first,last);</span><br><span class="line">  <span class="keyword">while</span> (count&gt;<span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    it = first; step=count/<span class="number">2</span>; advance (it,step);</span><br><span class="line">    <span class="keyword">if</span> (*it&lt;val) &#123;                 <span class="comment">// or: if (comp(*it,val)), for version (2)</span></span><br><span class="line">      first=++it;</span><br><span class="line">      count-=step+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> count=step;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> first;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>What should be mentioned is that <strong>the begin position will be included but the end position won’t be included.</strong> The function uses <strong>binary search</strong>, so the time complexity is $O(lgn)$ where $n$ is the size between two pointers.</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;&lt;p&gt;In this article I will describe two &lt;strong&gt;dynamic programming&lt;/strong&gt; algorithms solving LIS problem and &lt;strong&gt;STL functions&lt;/strong&gt; &lt;code&gt;lower_bound()&lt;/code&gt; and &lt;code&gt;upper_bound()&lt;/code&gt;.&lt;/p&gt;&lt;h3 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h3&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="https://erebos.top/categories/Leetcode/"/>
    
    
      <category term="STL" scheme="https://erebos.top/tags/STL/"/>
    
      <category term="Algorithm" scheme="https://erebos.top/tags/Algorithm/"/>
    
      <category term="Dynamic Programming" scheme="https://erebos.top/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode Solution: #146 LRUcache</title>
    <link href="https://erebos.top/2019/08/28/Leetcode-Solution-LRUcache/"/>
    <id>https://erebos.top/2019/08/28/Leetcode-Solution-LRUcache/</id>
    <published>2019-08-28T10:25:14.000Z</published>
    <updated>2019-09-02T01:14:54.354Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>Design and implement a data structure for <strong>Least Recent Used(LRU) cache</strong>. It should support the following operations: <code>get</code> and <code>put</code>.</p><p><code>get(key)</code> -Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.<br><code>put(key, value)</code> -Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.</p><a id="more"></a><p>The cache is initialized with a <strong>positive</strong> capacity.</p><h3 id="Basic-Idea"><a href="#Basic-Idea" class="headerlink" title="Basic Idea"></a>Basic Idea</h3><p>To solve this problem, we need to design a kind of data structure with the properties as follow:</p><ol><li>The data structure can visit the and set/insert the item as soon as possible(such as <strong>vector or map</strong>).</li><li>The data structure can order the data <strong>by the operation time.</strong></li><li>The data structure can quickly check for the <strong>overflow of capacity.</strong></li></ol><p>Due to the data structure in different language is not the same, I will choose <strong>python</strong> and <strong>cpp</strong> as my solution language.</p><h3 id="Python-solution"><a href="#Python-solution" class="headerlink" title="Python solution"></a>Python solution</h3><p>I will introduce a kind of python data structure called <strong>OrderedDict</strong>. This is a kind of dictionary(in fact it is inherited from ‘dictionary’ of python) with the order of insertion time. Python uses an extra <strong>circular linked list</strong> to save the node as form $[PREV, NEXT, KEY]$ to realize the data structure. Obviously, this data structure is perfectly suitable for our problem.</p><p>The only problem we need to solve is the question is to find a data structure ordering by <strong>operation time</strong> but not the <strong>insertion time</strong>. So we just need to simply <strong>delete and insert</strong> every operation to solve this problem.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span>:</span></span><br><span class="line">    <span class="keyword">import</span> collections</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, capacity: int)</span>:</span></span><br><span class="line">        self.capacity = capacity</span><br><span class="line">        self.cache = collections.OrderedDict()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, key: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> self.cache:</span><br><span class="line">            ret = self.cache[key]</span><br><span class="line">            <span class="keyword">del</span> self.cache[key]</span><br><span class="line">            self.cache[key] = ret</span><br><span class="line">            <span class="keyword">return</span> ret</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, key: int, value: int)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> self.cache:</span><br><span class="line">            <span class="keyword">del</span> self.cache[key]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.capacity == len(self.cache):</span><br><span class="line">          <span class="comment">#This for iteration is to visit the first value of cache.</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> self.cache.keys():</span><br><span class="line">                <span class="keyword">del</span> self.cache[i]</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        self.cache[key] = value</span><br><span class="line"><span class="comment"># Your LRUCache object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = LRUCache(capacity)</span></span><br><span class="line"><span class="comment"># param_1 = obj.get(key)</span></span><br><span class="line"><span class="comment"># obj.put(key,value)</span></span><br></pre></td></tr></table></figure><h3 id="Cpp-solution-using-STL-container"><a href="#Cpp-solution-using-STL-container" class="headerlink" title="Cpp solution(using STL container)"></a>Cpp solution(using STL container)</h3><p>CPP provides many kinds of STL containers, but there are nothing like the ‘OrderedDict’ in python. The design idea is to <strong>combine two or more kinds of containers</strong>(like the OrderedDict source code do). If we want to build a structure with <strong>insertion order</strong>, stack will be a first choice. But what we also want is to <strong>keep the high speed of insertion and deletion</strong> of map/vector, which will conflict with stack’s properties that we can not move/delete a node in the middle of a stack. Therefore, <strong>Linked List</strong>(in STL is list) will be a great choice, which also matches python’s choice. To keep the order of operation time, the problem we need to solve can be as follow:</p><ol><li>We need a fast way to <strong>visit/insert/delete</strong> a node in linked list <strong>given key</strong>.</li><li>We need a fast way to <strong>move a node to the front</strong> of linked list after every operation.</li><li>When we get the first value of linked list, we need a fast way to <strong>delete the pair in map/vector.</strong></li></ol><p>These properties keeps a linked list by operation time order with short modifying time. Actually, property $1$ and $2$ can be combined due to the property of Linked List. Map can be a good way to satisfy property $1$ and $2$. We can use <strong>map(key, node)</strong> form to visit a linked list node quickly in $O(1)$ time. About property $3$, we need a <strong>reverse_map(value, key)</strong> to fast delete corresponding pair in map. We just need to delete <strong>reverse_map[node.value]</strong> in map. But it’s not convenient and cost extra space. We can just store <strong>node(value, key)</strong> in linked list to do the same thing.</p><p>In conclusion, what we need is to combine a <strong>map</strong>(or unordered_map) and a <strong>list.</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    LRUCache(<span class="keyword">int</span> capacity) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;cache = <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">list</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;::iterator&gt;();</span><br><span class="line">        <span class="keyword">this</span>-&gt;linkedlist = <span class="built_in">list</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;();</span><br><span class="line">        <span class="keyword">this</span>-&gt;cap = capacity;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> it = cache.find(key);</span><br><span class="line">        <span class="keyword">if</span>(it != cache.end())&#123;</span><br><span class="line">            linkedlist.splice(linkedlist.begin(), linkedlist, it-&gt;second);</span><br><span class="line">            <span class="keyword">return</span> it-&gt;second-&gt;second;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> it = cache.find(key);</span><br><span class="line">        <span class="keyword">if</span>(it != cache.end())</span><br><span class="line">            linkedlist.erase(it-&gt;second);</span><br><span class="line">        linkedlist.push_front(&#123;key, value&#125;);</span><br><span class="line">        cache[key] = linkedlist.begin();</span><br><span class="line">        <span class="keyword">if</span>(cache.size() &gt; cap)&#123;</span><br><span class="line">            <span class="keyword">int</span> key_recent = linkedlist.back().first;</span><br><span class="line">            cache.erase(key_recent);</span><br><span class="line">            linkedlist.pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">list</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;::iterator&gt; cache;</span><br><span class="line">    <span class="built_in">list</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; linkedlist;</span><br><span class="line">    <span class="keyword">int</span> cap;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>There are also some tricky cases like we need to <strong>check for if key in the cache first</strong> because change a value in cache need to delete the value first and then insert a new one.</p><p>The combination of STL containers is not the only way to solve this problem. Actually many artificial data structures have better performance. A specific example is using <strong>circular linked list nodes</strong> just like python do in the ‘OrderedDict’. I won’t cover this method here and you can find related articles easily.</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h3&gt;&lt;p&gt;Design and implement a data structure for &lt;strong&gt;Least Recent Used(LRU) cache&lt;/strong&gt;. It should support the following operations: &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;put&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;code&gt;get(key)&lt;/code&gt; -Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.&lt;br&gt;&lt;code&gt;put(key, value)&lt;/code&gt; -Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="https://erebos.top/categories/Leetcode/"/>
    
    
      <category term="STL" scheme="https://erebos.top/tags/STL/"/>
    
      <category term="Data Structure" scheme="https://erebos.top/tags/Data-Structure/"/>
    
      <category term="Cpp" scheme="https://erebos.top/tags/Cpp/"/>
    
      <category term="Python" scheme="https://erebos.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode Solution: #142 Linked List Circle</title>
    <link href="https://erebos.top/2019/08/27/Leetcode-Solution-Linked-List-Circle-0/"/>
    <id>https://erebos.top/2019/08/27/Leetcode-Solution-Linked-List-Circle-0/</id>
    <published>2019-08-27T06:07:05.000Z</published>
    <updated>2019-09-02T01:14:54.356Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>Given a linked list and return where the circle begins. For example, a linked list $[3, 2, 0, 4]$ having circle $[2, 0, 4]$ is shown below.</p><p><img src="https://raw.githubusercontent.com/18918606287/picture4blog/master/linked_circle.png?token=AKSH2L6SAQWW7JM72BLNEZC5N3VDA" alt="Linked_circle"></p><p>The algorithm should return the second node. I use C++ to solve this problem and define the node as below.</p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Definition for singly-linked list.</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> &#123;</span></span><br><span class="line">     <span class="keyword">int</span> val;</span><br><span class="line">     ListNode *next;</span><br><span class="line">     ListNode(<span class="keyword">int</span> x) : val(x), next(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Solution-1-hashset"><a href="#Solution-1-hashset" class="headerlink" title="Solution 1: hashset"></a>Solution 1: hashset</h3><p>A trivial idea to solve this problem is saving the node information in a hashset when traversing and find if there is a visited node.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">detectCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        ListNode *cur = head;</span><br><span class="line">        <span class="built_in">unordered_set</span>&lt;ListNode*&gt; storage;</span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (storage.find(cur)!=storage.end())&#123;</span><br><span class="line">                <span class="keyword">return</span> cur;</span><br><span class="line">            &#125;</span><br><span class="line">            storage.insert(cur);</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>This is a method with O(n) time complexity and O(n) space complexity. But if there is a method to solve this problem with O(1) space complexity?</p><h3 id="Solution-2-fast-and-slow-pointers"><a href="#Solution-2-fast-and-slow-pointers" class="headerlink" title="Solution 2: fast and slow pointers"></a>Solution 2: fast and slow pointers</h3><p>Set two pointers which slower one move one time one step and faster one move one time two steps. Once they meet, <strong>reset the faster one to the head pointer</strong>, then finally they will meet in the begin node of circle. This is an algorithm without extra space. But why it works?</p><p>There is a mathematical idea. Suppose the distance from head node to the begin of circle is $x_1$, the distance from begin of circle and meeting point on the circle is $x_2$, the distance from meeting point back to the begin of the circle is $x_3$. Then there is the velocity equation.</p><script type="math/tex; mode=display">2*((x_1 + x_2) + k_1(x_2+x_3)) = (x_1 + x_2) + k_2 (x_2+x_3)</script><script type="math/tex; mode=display">-> x_1 + x_2 = (k_2 - 2*k_1 - 1)(x_2 + x_3)</script><script type="math/tex; mode=display">-> (x_2 + x_3)|(x_1 + x_2)</script><p>It means that the difference between $x_3$ and $x_1$ is the multiple of circle length. Due to the definition of $x_3$ and $x_1$, if the fast pointer move from the head node when the slow pointer move from the meeting point, <strong>finally the slow pointer and fast pointer will meet on the begin of the circle.</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">detectCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">NULL</span> || head-&gt;next == <span class="literal">NULL</span> || head-&gt;next-&gt;next == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        ListNode* fast = head-&gt;next-&gt;next;</span><br><span class="line">        ListNode* slow = head-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(fast != slow)&#123;</span><br><span class="line">            <span class="keyword">if</span>(fast-&gt;next == <span class="literal">NULL</span> || fast-&gt;next-&gt;next == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        fast = head;</span><br><span class="line">        <span class="keyword">while</span>(fast != slow)&#123;</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Don’t forget the special cases of NULL pointer and if fast pointer move to NULL means <strong>there is no circle.</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h3&gt;&lt;p&gt;Given a linked list and return where the circle begins. For example, a linked list $[3, 2, 0, 4]$ having circle $[2, 0, 4]$ is shown below.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/18918606287/picture4blog/master/linked_circle.png?token=AKSH2L6SAQWW7JM72BLNEZC5N3VDA&quot; alt=&quot;Linked_circle&quot;&gt;&lt;/p&gt;&lt;p&gt;The algorithm should return the second node. I use C++ to solve this problem and define the node as below.&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="https://erebos.top/categories/Leetcode/"/>
    
    
      <category term="Algorithm" scheme="https://erebos.top/tags/Algorithm/"/>
    
  </entry>
  
</feed>
