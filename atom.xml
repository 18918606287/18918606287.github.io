<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Erebos&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://erebos.top/"/>
  <updated>2019-11-03T22:56:23.745Z</updated>
  <id>https://erebos.top/</id>
  
  <author>
    <name>Erebos</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Machine Learning Basis: Lagrange Duality and KKT Condition</title>
    <link href="https://erebos.top/2019/11/04/Machine-Learning-Basis-Lagrange-Duality-and-KKT-Condition/"/>
    <id>https://erebos.top/2019/11/04/Machine-Learning-Basis-Lagrange-Duality-and-KKT-Condition/</id>
    <published>2019-11-03T20:32:23.000Z</published>
    <updated>2019-11-03T22:56:23.745Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Duality and KKT condition are very important for machine learning, especially in SVM models. I’ll focus more on the high-level idea and the derivation of Lagrange Duality and how to introduce to KKT condition. There are some connceptions should be covered first.</p><h3 id="Optimization-Problems-without-Restrictions"><a href="#Optimization-Problems-without-Restrictions" class="headerlink" title="Optimization Problems without Restrictions"></a>Optimization Problems without Restrictions</h3><p>The basic form of optimization problem without restrictions is just like finding the $x \in \Re^d$ makes that</p><script type="math/tex; mode=display">min_{x\in \Re^d} f(x)</script><p>A simple solution is to calculate the derivatives of $f(x)$, solve the equation <script type="math/tex">f'(x^*) = 0</script> and test if <script type="math/tex">x^*</script> is the minimal value.</p><h3 id="Lagrange-Multiplier"><a href="#Lagrange-Multiplier" class="headerlink" title="Lagrange Multiplier"></a>Lagrange Multiplier</h3><p>Consider an Optimization Problem with equality restrictions.</p><script type="math/tex; mode=display">min_{x\in \Re^d} f(x)</script><script type="math/tex; mode=display">s.t. h_i(x) = 0</script><p>Lagrange Multiplier is a method to solve this kind of problem. We can rewrite the objective function as <script type="math/tex">f(x) + \sum^n_{i=1}\lambda_i h_i(x)</script>. Then we can prove that the solution of <script type="math/tex">min_{x\in \Re^d,\lambda_i\in \Re }f(x) + \sum^n_{i=1}\lambda_i h_i(x)</script> is equal to the solution of previous problem. Here <script type="math/tex">\lambda_i</script> are called the Lagrange Multiplier. The new optimization problem is</p><script type="math/tex; mode=display">min_{x\in \Re^d} f(x) + \sum^n_{i=1}\lambda_i h_i(x)</script><p>And here the new function <script type="math/tex">\mathcal{L}(x,\lambda) = f(x) + \sum^n_{i=1}\lambda_i h_i(x)</script> is called Lagrange function.</p><p>If there is any <script type="math/tex">h_i(x) \neq0</script>, the minimum will become $-\infty$ due to the unrestricted <script type="math/tex">\lambda_i</script>, so we should add a restriction that <script type="math/tex">\nabla_{x,\lambda}\mathcal{L}(x, \lambda)= 0</script> which makes the solution finite and converge into <script type="math/tex">h_i(x) = 0</script>.</p><h3 id="Dual-Problem"><a href="#Dual-Problem" class="headerlink" title="Dual Problem"></a>Dual Problem</h3><p>Let <script type="math/tex">\mathcal{L}(x,\lambda, \mu) = f(x) + \sum_{i=1}^n\lambda_i h_i(x) + \sum_{j=1}^m\mu_j g_j(x)</script>,then there is a trivial theorem that</p><script type="math/tex; mode=display">d^* = max_{\lambda, \mu}(min_{x}(\mathcal{L}(x, \lambda,\mu))) \leq min_{x}({max_{\lambda, \mu}\mathcal{L}(x, \lambda, \mu)}) = p^*</script><p>Here <script type="math/tex">d^* = max_{\lambda, \mu}(min_{x}(\mathcal{L}(x, \lambda,\mu)))</script> is the dual problem of <script type="math/tex">p^*</script>.</p><h2 id="Derivation"><a href="#Derivation" class="headerlink" title="Derivation"></a>Derivation</h2><h3 id="Transformation-of-Primal-Problem"><a href="#Transformation-of-Primal-Problem" class="headerlink" title="Transformation of Primal Problem"></a>Transformation of Primal Problem</h3><p>Assume <script type="math/tex">f(x), g_i(x), h_j(x)</script> are continuous functions on <script type="math/tex">\Re^d</script>, then consider the restricted optimization problem.</p><script type="math/tex; mode=display">min_{x\in \Re^d} f(x)</script><script type="math/tex; mode=display">s.t.\left\{    \begin{array}{lr}        g_i(x) \leq 0\\        h_i(x) = 0    \end{array}\right.</script><p>We have already known that the primal problem without restrictions can be solved easily by calculating derivatives and testing. So our first step is to translate the primal problem into a problem without restrictions.</p><p>We have a enhanced Lagrange Function in form of <script type="math/tex">\mathcal{L}(x,\lambda, \mu) = f(x) + \sum_{i=1}^n\lambda_i h_i(x) + \sum_{j=1}^m\mu_j g_j(x)</script>. Here <script type="math/tex">\mu_j \geq 0</script> because <strong>the direction</strong> of <script type="math/tex">g_j</script> has been restricted.</p><p>Define a new function <script type="math/tex">d(x) = max_{\lambda,\mu>0}\mathcal{L}(x, \lambda, \mu)</script>, we can conclude that <script type="math/tex">min_{x}d(x) = min_{x}f(x)</script> under all primal constraints.</p><p>Obviously, <script type="math/tex">d(x) \geq max_{\lambda, \mu}f(x) = f(x)</script>, so <script type="math/tex">d(x)</script> is an upper bound of <script type="math/tex">f(x)</script>. Then under all constraints, we have <script type="math/tex">\sum_{i=1}^n\lambda_i h_i(x) + \sum_{j=1}^m\mu_j g_j(x) = 0</script>, then <script type="math/tex">d(x) = max_{\lambda, \mu}f(x) = f(x)</script>.</p><p>In conclusion, the primal problem has an equivalent form</p><script type="math/tex; mode=display">min_{x\in \Re^d}({max_{\lambda, \mu}\mathcal{L}(x, \lambda, \mu)})</script><script type="math/tex; mode=display">s.t.\left\{    \begin{array}{lr}        g_i(x) \leq 0\\        h_i(x) = 0    \end{array}\right.</script><h3 id="KKT-condition"><a href="#KKT-condition" class="headerlink" title="KKT condition"></a>KKT condition</h3><p>We have already known the equivalent form of primal problem, but in this form we should still consider the constraints which makes the calculation too complicated. The next step is to find a simpler way of finding the <strong>best solution</strong>.</p><p>Consider the dual problem, a well property should be <script type="math/tex">d^* = p^*</script> when <script type="math/tex">x = x^*</script> is the best solution of primal problem.</p><p>Think back the transformation of primal problem, if dual problem is equal to the primal problem on $x = x^*$, the formula should be</p><script type="math/tex; mode=display">min_{x}(max_{\lambda, \mu} f(x) + \sum_{i=1}^n\lambda_i h(x) + \sum_{i=1}^m\mu_j g_j(x))</script><script type="math/tex; mode=display">= max_{\lambda, \mu}(min_{x}f(x) + \sum_{i=1}^n\lambda_i h(x) + \sum_{i=1}^m\mu_j g_j(x)))</script><script type="math/tex; mode=display">s.t.\mu_j \geq 0</script><p>Then consider the Lagrange condition of both inner optimizations which are <script type="math/tex">max_{\lambda, \mu}\mathcal{L}(x,\lambda,\mu)</script> and <script type="math/tex">min_{x}\mathcal{L}(x,\lambda,\mu)</script>. This leads to <script type="math/tex">\nabla_x\mathcal{L}(x^*) = 0</script> and <script type="math/tex">\nabla_\lambda\mathcal{L} = 0</script>.</p><p>Then consider the parameter <script type="math/tex">\mu_j</script>. There are two situations about <script type="math/tex">g_j(x)</script>. First is that the minimized point is of <script type="math/tex">g_j(x) = 0</script> and the other is that the minimized point is of <script type="math/tex">g_j(x) < 0</script>.</p><p>For the first case, the inequality constraint becomes a equality constraint. That is</p><script type="math/tex; mode=display">g_j(x) = 0</script><p>For the second case, the inequality constraint disappears, that is</p><script type="math/tex; mode=display">\mu_j = 0</script><p>So combine two situations together we have <script type="math/tex">\mu_j g_j(x)=0</script>. Then under this constraint, the <script type="math/tex">\mathcal{L}</script> becomes a regular Lagrange Function, which leads to a Lagrange Multiplier constraint that</p><script type="math/tex; mode=display">\nabla \mathcal{L}_{x, \lambda} = 0</script><p>So the final constraint becomes</p><script type="math/tex; mode=display">\nabla f(x^*) + \sum_{i=1}^n \lambda_i\nabla h_i(x^*) + \sum_{j=1}^m \lambda_j\nabla g_j(x^*) = 0</script><script type="math/tex; mode=display">h_i(x^*) = 0</script><script type="math/tex; mode=display">\mu_j g_j(x^*) = 0</script><script type="math/tex; mode=display">\mu_j \geq 0</script><p>This is the KKT condition.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;Duality and KKT condition are 
      
    
    </summary>
    
      <category term="Learning Notes" scheme="https://erebos.top/categories/Learning-Notes/"/>
    
    
      <category term="Optimization" scheme="https://erebos.top/tags/Optimization/"/>
    
  </entry>
  
  <entry>
    <title>Connecting CAEN using VScode</title>
    <link href="https://erebos.top/2019/10/06/Connecting-CAEN-using-VScode/"/>
    <id>https://erebos.top/2019/10/06/Connecting-CAEN-using-VScode/</id>
    <published>2019-10-06T00:18:17.000Z</published>
    <updated>2019-11-03T22:40:24.016Z</updated>
    
    <content type="html"><![CDATA[<h3 id="What-and-Why"><a href="#What-and-Why" class="headerlink" title="What and Why"></a>What and Why</h3><p>CAEN is the information technology (IT) services department for the University of Michigan (U-M) College of Engineering, and offers IT resources to support the College’s educational, research, and administrative needs. It’s quite unefficient to manage files on CAEN using command line tools if I need to text our code in CAEN environment. I need to type the whole sftp command and path every time. Plugins for editors is a great solution. There are many tutorials about connecting using Sublime Text Editor on the Internet, but there is no documentations about VScode. As a fan of VScode, that’s why I want to write this article.</p><h3 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h3><p>This is my own running environment may but not necessary.</p><ul><li>Operating system: Windows 10</li><li>VSCode Version: 1.36.1</li><li>Plugin: SFTP (by liximomo)</li></ul><a id="more"></a><h3 id="Getting-Start"><a href="#Getting-Start" class="headerlink" title="Getting Start"></a>Getting Start</h3><p>After downloading the plugin, press <code>Ctrl+Shift+P</code> and run <code>SFTP: config</code> command. This command will build a configuration file named <code>sftp.json</code> on your folder (you may need to open a folder) and it may looks like:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"My Server"</span>,</span><br><span class="line">    <span class="attr">"host"</span>: <span class="string">"localhost"</span>,</span><br><span class="line">    <span class="attr">"protocol"</span>: <span class="string">"sftp"</span>,</span><br><span class="line">    <span class="attr">"port"</span>: <span class="number">22</span>,</span><br><span class="line">    <span class="attr">"username"</span>: <span class="string">"username"</span>,</span><br><span class="line">    <span class="attr">"remotePath"</span>: <span class="string">"/"</span>,</span><br><span class="line">    <span class="attr">"uploadOnSave"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Name your server casually in <code>name</code> and the type the host address of CAEN machine in <code>host</code>. The host will be something looked like <code>login.engin.umich.edu</code>. It’s not necessary to change the <code>protocol</code> and <code>port</code>. The <code>username</code> is your Umich unique name.</p><p>Here is the explanation of these parameters.</p><ul><li><code>name</code> is your own name of this server, you can name it casually.</li><li><code>host</code> is the host address of CAEN machine, like <code>login.engin.umich.edu</code>.</li><li><code>protocol</code> is the protocol of connection, you don’t need to change the default <code>sftp</code>.</li><li><code>port</code> is the port of the connecting server.</li><li><code>username</code> is yout own Umich uniquename which is needed for signing in the server.</li><li><code>remotePath</code> is the path <strong><em>on the CEAN machine</em></strong> where will upload your local file to. For example <code>home/username</code>.</li><li><code>uploadOnSave</code> is the switch of autouploading to the server. If the value is true, the files will be automatically uploaded to your server when you save your files locally.</li></ul><p>After all these settings are saved, you will see a new icon on the Activity Bar.</p><h3 id="Two-factor-Authentication"><a href="#Two-factor-Authentication" class="headerlink" title="Two-factor Authentication"></a>Two-factor Authentication</h3><p>The University of Michigan uses two-factor authentication to authenticate your account. So we need to add a new parameter to handle this. Add a new attribute <code>interactiveAuth</code> in the json file and set it to <code>true</code>. So the whole configuration file will looks like</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"My Server"</span>,</span><br><span class="line">    <span class="attr">"host"</span>: <span class="string">"xxx.xxx.xxx.xxx"</span>,</span><br><span class="line">    <span class="attr">"protocol"</span>: <span class="string">"sftp"</span>,</span><br><span class="line">    <span class="attr">"port"</span>: <span class="number">22</span>,</span><br><span class="line">    <span class="attr">"username"</span>: <span class="string">"username"</span>,</span><br><span class="line">    <span class="attr">"remotePath"</span>: <span class="string">"/home/username"</span>,</span><br><span class="line">    <span class="attr">"uploadOnSave"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"interactiveAuth"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Connecting"><a href="#Connecting" class="headerlink" title="Connecting"></a>Connecting</h3><p>Double click the server in the SFTP option on the activity bar with the following icon.</p><p> <img src="https://raw.githubusercontent.com/hongxin-y/picture4blog/master/sftp_icon.png?token=AKSH2LZDEWQACKGI3TC6FPK5ZCIZ2" alt="sftp_icon"></p><p>After connecting, you will see a input window above looks like</p><p><img src="https://raw.githubusercontent.com/hongxin-y/picture4blog/master/pwd_window.jpg?token=AKSH2L76E2MJD5QQOGJZDFS5ZCI26" alt="password_window"></p><p>Then your will see a two-factor authentication window like</p><p><img src="https://raw.githubusercontent.com/hongxin-y/picture4blog/master/duo_window.jpg?token=AKSH2L3O5PMR5WCNHFECIVS5ZCI4A" alt="duo_window"></p><p>input and pass the authentication through app or message, then you will see the dictionary of your server machine.</p><p><img src="https://raw.githubusercontent.com/hongxin-y/picture4blog/master/dictionary.png?token=AKSH2L7OPAU4DDZQ3R4P3S25ZCI5A" alt="dictionary"></p><p>Mention that if you use address <code>&quot;/&quot;</code> in the <code>remotePath</code>, you will connect to the public area and will <strong><em>have not permission to open the private folders including yours</em></strong>.</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;What-and-Why&quot;&gt;&lt;a href=&quot;#What-and-Why&quot; class=&quot;headerlink&quot; title=&quot;What and Why&quot;&gt;&lt;/a&gt;What and Why&lt;/h3&gt;&lt;p&gt;CAEN is the information technology (IT) services department for the University of Michigan (U-M) College of Engineering, and offers IT resources to support the College’s educational, research, and administrative needs. It’s quite unefficient to manage files on CAEN using command line tools if I need to text our code in CAEN environment. I need to type the whole sftp command and path every time. Plugins for editors is a great solution. There are many tutorials about connecting using Sublime Text Editor on the Internet, but there is no documentations about VScode. As a fan of VScode, that’s why I want to write this article.&lt;/p&gt;
&lt;h3 id=&quot;Environment&quot;&gt;&lt;a href=&quot;#Environment&quot; class=&quot;headerlink&quot; title=&quot;Environment&quot;&gt;&lt;/a&gt;Environment&lt;/h3&gt;&lt;p&gt;This is my own running environment may but not necessary.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Operating system: Windows 10&lt;/li&gt;
&lt;li&gt;VSCode Version: 1.36.1&lt;/li&gt;
&lt;li&gt;Plugin: SFTP (by liximomo)&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Others" scheme="https://erebos.top/categories/Others/"/>
    
    
      <category term="SFTP" scheme="https://erebos.top/tags/SFTP/"/>
    
      <category term="Umich" scheme="https://erebos.top/tags/Umich/"/>
    
  </entry>
  
  <entry>
    <title>Machine Learning Basis: Convex Function and Hessian Matrix</title>
    <link href="https://erebos.top/2019/09/09/Machine-Learning-Basis-Convex-Function-and-Hessian-Matrix/"/>
    <id>https://erebos.top/2019/09/09/Machine-Learning-Basis-Convex-Function-and-Hessian-Matrix/</id>
    <published>2019-09-08T23:04:23.000Z</published>
    <updated>2019-10-05T23:36:23.958Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Optimization is a focus on many kinds of machine learning algorithms like Linear Regression, SVM and K-means. But actually many kinds of target function is non-convex which means we can only find its local minima. But convex functions still plays an important role in machine learning. And Hessian Matrix is a great algebra tool to analyze convex functions since in most cases our target function will be real, continuous and $2^{nd}$-order differentiable. The main goal of this article is to record the proof of the equivalence between Convex Functions and their Hessians. Here is the some important definitions.</p><h3 id="Convex-Set"><a href="#Convex-Set" class="headerlink" title="Convex Set"></a>Convex Set</h3><p>A <strong>Convex Set</strong> $C\subseteq \Re^n$ is a set of points s.t. $\forall x, y \in C$ and $t \in [0,1]$, $tx+(1-t)y \in C$.</p><h3 id="Convex-Function"><a href="#Convex-Function" class="headerlink" title="Convex Function"></a>Convex Function</h3><p>A function $f:\Re^n \rightarrow \Re$ is a <strong>Convex Function</strong> if for $x, y \in D$, where $D$ is a <strong>convex set</strong>, $f$ and any $t \in [0,1]$ makes</p><script type="math/tex; mode=display">f(tx + (1-t)y) \leq tf(x) + (1-t)f(y)</script><h3 id="Hessian-Matrix"><a href="#Hessian-Matrix" class="headerlink" title="Hessian Matrix"></a>Hessian Matrix</h3><p>A <strong>Hessian Matrix</strong> is a square matrix of <strong>second-order partial derivatives</strong> of a function $f:\Re^n \rightarrow \Re$, usually written as:</p><script type="math/tex; mode=display">H = \nabla^2f(x) = \left[\begin{array}{cc}\frac{\partial^2 f}{\partial x_1\partial x_1} & \frac{\partial^2 f}{\partial x_1\partial x_2} & ... & \frac{\partial^2 f}{\partial x_1\partial x_d}\\\frac{\partial^2 f}{\partial x_2\partial x_1} & \frac{\partial^2 f}{\partial x_2\partial x_2} & ... & \frac{\partial^2 f}{\partial x_2\partial x_d}\\... & ... & ... & ... \\\frac{\partial^2 f}{\partial x_d\partial x_1} & \frac{\partial^2 f}{\partial x_d\partial x_2} & ... & \frac{\partial^2 f}{\partial x_d\partial x_d}\end{array}\right]_{d\times d}</script><h3 id="Positive-Definite-Semi-Definite-Matrix"><a href="#Positive-Definite-Semi-Definite-Matrix" class="headerlink" title="Positive Definite/Semi-Definite Matrix"></a>Positive Definite/Semi-Definite Matrix</h3><p>A <strong>real symmetric matrix</strong> $P$ is called <strong>Positive Semi-Definite</strong> (PSD) when for all $x \in \Re^n$, there are $x^TPx \geq 0$. And it’s called <strong>Positive Definite</strong> (PD) when for all $x \neq 0 \in \Re^n$, there are $x^TPx &gt; 0$.<br><a id="more"></a></p><h2 id="The-equivalence-of-convex-function"><a href="#The-equivalence-of-convex-function" class="headerlink" title="The equivalence of convex function"></a>The equivalence of convex function</h2><p>There is a strong relationship between Convex Functions and their Hessians. Here is what I want to prove today.</p><blockquote><p>A $2^{nd}$-order differentiable function $f$ with convex domain $D$ is (strict) convex <strong>if and only if</strong> its Hessian is <strong>PSD (PD)</strong>.</p></blockquote><p>This conclusion is also called the <strong>Second Order Condition</strong> of a convex function. To prove this, we need to introduce a <strong>First Order Condition</strong> that is</p><blockquote><p>A $1^{st}$-order differentiable function $f$ with convex domain $D$ is (strict) convex <strong>if and only if</strong> for any $x, y\in D$, $f(y) \geq f(x) + \nabla^T f(x)(y-x)$</p></blockquote><h3 id="Proof-of-First-Order-Condition"><a href="#Proof-of-First-Order-Condition" class="headerlink" title="Proof of First Order Condition"></a>Proof of First Order Condition</h3><p>I divided the proof into two parts. Firstly we can prove that if $f$ is a convex function, then first order condition works.<br>If $f$ is convex, we have</p><script type="math/tex; mode=display">f(tx+(1-t)y) = f(y+t(x-y))</script><script type="math/tex; mode=display"> = f(y) + t\nabla^Tf(y)(x-y) + t^2(x-y)^T\nabla^2f(y)(x-y) + o(t\|x-y\|)</script><script type="math/tex; mode=display">\leq tf(x)+(1-t)f(y).</script><p>So, we can see</p><script type="math/tex; mode=display">tf(x) \geq tf(y) + t\nabla^Tf(y)(x-y) + t^2(x-y)^T\nabla^2f(y)(x-y) + o(t\|x-y\|)</script><script type="math/tex; mode=display">f(x) \geq f(y) + \nabla^Tf(y)(x-y) + t(x-y)^T\nabla^2f(y)(x-y) + \frac{o(t\|x-y\|)}{t}</script><p>Let $t\rightarrow 0$,</p><script type="math/tex; mode=display">f(x) \geq f(y) + \nabla^Tf(y)(x-y)</script><p>Then we can prove that, under the case of first order condition, $f$ is a convex function.<br>If $f$ satisfy the first order condition, for all $x, y\in \Re^n$ and $t\in [0,1]$, we have</p><script type="math/tex; mode=display">f(x) \geq f(tx+(1-t)y) + \nabla^Tf(tx+(1-t)y)(x-(tx+(1-t)y)</script><script type="math/tex; mode=display">f(y) \geq f(tx+(1-t)y) + \nabla^Tf(tx+(1-t)y)(y-(tx+(1-t)y)</script><p>Add them together, we have</p><script type="math/tex; mode=display">tf(x)+(1-t)f(y)</script><script type="math/tex; mode=display">\geq (t+(1-t))f(tx+(1-t)y) + [tx+(1-t)y-(t+1-t)(tx+(1-t)y)]\nabla^Tf(tx+(1-t)y)</script><script type="math/tex; mode=display">= f(tx+(1-t)y) + 0 = f(tx+(1-t)y)</script><p>So $f(x)$ is a convex function.</p><h3 id="Proof-of-Second-Order-Condition"><a href="#Proof-of-Second-Order-Condition" class="headerlink" title="Proof of Second Order Condition"></a>Proof of Second Order Condition</h3><p>Now all prerequisites are proved, it’s turn to prove the <em>Second Order Condition</em>! Also, I depart the proof into two parts.<br>First we prove that if the Hessian of $f$, $H$ is $PSD$, then $f$ is convex.</p><p>If $f$ is PSD, there exists $\xi$ that</p><script type="math/tex; mode=display">f(x) = f(y) + \nabla^Tf(y)(y-x) + \frac{1}{2}(y-x)^T\nabla^2f(\xi)(y-x) \geq f(y) + \nabla^Tf(y)(y-x)</script><p>So $f$ is convex due to the <strong>first order condition</strong>.</p><p>Then we can prove the reverse part.<br>If $f$ is convex, according to the <strong>first order condition</strong>, we suppose for all $y$,</p><script type="math/tex; mode=display">f(x+\lambda y) = f(x) + \lambda\nabla^Tf(x)y + \frac{1}{2}\lambda^2y^T\nabla^2f(x)y + o(\lambda^2\|y\|^2)</script><script type="math/tex; mode=display">\geq f(x) + \nabla^Tf(x)(x+\lambda y - x)</script><p>Then,</p><script type="math/tex; mode=display">\frac{1}{2}\lambda^2y^T\nabla^2f(x)y + o(\lambda^2\|y\|^2) \geq 0</script><script type="math/tex; mode=display">\Rightarrow y^T\nabla^2f(x)y + \frac{o(\lambda^2\|y\|^2)}{\frac{1}{2}\lambda^2} \geq 0</script><p>Let $\lambda\rightarrow0$, we have $y^T\nabla^2f(x)y \geq 0$<br>So $\nabla^2f(x)$ is PSD.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;Optimization is a focus on many kinds of machine learning algorithms like Linear Regression, SVM and K-means. But actually many kinds of target function is non-convex which means we can only find its local minima. But convex functions still plays an important role in machine learning. And Hessian Matrix is a great algebra tool to analyze convex functions since in most cases our target function will be real, continuous and $2^{nd}$-order differentiable. The main goal of this article is to record the proof of the equivalence between Convex Functions and their Hessians. Here is the some important definitions.&lt;/p&gt;
&lt;h3 id=&quot;Convex-Set&quot;&gt;&lt;a href=&quot;#Convex-Set&quot; class=&quot;headerlink&quot; title=&quot;Convex Set&quot;&gt;&lt;/a&gt;Convex Set&lt;/h3&gt;&lt;p&gt;A &lt;strong&gt;Convex Set&lt;/strong&gt; $C\subseteq \Re^n$ is a set of points s.t. $\forall x, y \in C$ and $t \in [0,1]$, $tx+(1-t)y \in C$.&lt;/p&gt;
&lt;h3 id=&quot;Convex-Function&quot;&gt;&lt;a href=&quot;#Convex-Function&quot; class=&quot;headerlink&quot; title=&quot;Convex Function&quot;&gt;&lt;/a&gt;Convex Function&lt;/h3&gt;&lt;p&gt;A function $f:\Re^n \rightarrow \Re$ is a &lt;strong&gt;Convex Function&lt;/strong&gt; if for $x, y \in D$, where $D$ is a &lt;strong&gt;convex set&lt;/strong&gt;, $f$ and any $t \in [0,1]$ makes&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
f(tx + (1-t)y) \leq tf(x) + (1-t)f(y)&lt;/script&gt;&lt;h3 id=&quot;Hessian-Matrix&quot;&gt;&lt;a href=&quot;#Hessian-Matrix&quot; class=&quot;headerlink&quot; title=&quot;Hessian Matrix&quot;&gt;&lt;/a&gt;Hessian Matrix&lt;/h3&gt;&lt;p&gt;A &lt;strong&gt;Hessian Matrix&lt;/strong&gt; is a square matrix of &lt;strong&gt;second-order partial derivatives&lt;/strong&gt; of a function $f:\Re^n \rightarrow \Re$, usually written as:&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
H = \nabla^2f(x) = \left[
\begin{array}{cc}
\frac{\partial^2 f}{\partial x_1\partial x_1} &amp; \frac{\partial^2 f}{\partial x_1\partial x_2} &amp; ... &amp; \frac{\partial^2 f}{\partial x_1\partial x_d}\\
\frac{\partial^2 f}{\partial x_2\partial x_1} &amp; \frac{\partial^2 f}{\partial x_2\partial x_2} &amp; ... &amp; \frac{\partial^2 f}{\partial x_2\partial x_d}\\
... &amp; ... &amp; ... &amp; ... \\
\frac{\partial^2 f}{\partial x_d\partial x_1} &amp; \frac{\partial^2 f}{\partial x_d\partial x_2} &amp; ... &amp; \frac{\partial^2 f}{\partial x_d\partial x_d}
\end{array}
\right]_{d\times d}&lt;/script&gt;&lt;h3 id=&quot;Positive-Definite-Semi-Definite-Matrix&quot;&gt;&lt;a href=&quot;#Positive-Definite-Semi-Definite-Matrix&quot; class=&quot;headerlink&quot; title=&quot;Positive Definite/Semi-Definite Matrix&quot;&gt;&lt;/a&gt;Positive Definite/Semi-Definite Matrix&lt;/h3&gt;&lt;p&gt;A &lt;strong&gt;real symmetric matrix&lt;/strong&gt; $P$ is called &lt;strong&gt;Positive Semi-Definite&lt;/strong&gt; (PSD) when for all $x \in \Re^n$, there are $x^TPx \geq 0$. And it’s called &lt;strong&gt;Positive Definite&lt;/strong&gt; (PD) when for all $x \neq 0 \in \Re^n$, there are $x^TPx &amp;gt; 0$.&lt;br&gt;
    
    </summary>
    
      <category term="Learning Notes" scheme="https://erebos.top/categories/Learning-Notes/"/>
    
    
      <category term="Optimization" scheme="https://erebos.top/tags/Optimization/"/>
    
      <category term="Linear Algebra" scheme="https://erebos.top/tags/Linear-Algebra/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Solution: Best Time to Buy and Sell Stock</title>
    <link href="https://erebos.top/2019/09/05/LeetCode-Solution-Best-Time-Stock-to-Buy-and-Sell-Stock/"/>
    <id>https://erebos.top/2019/09/05/LeetCode-Solution-Best-Time-Stock-to-Buy-and-Sell-Stock/</id>
    <published>2019-09-04T23:13:50.000Z</published>
    <updated>2019-10-05T23:35:08.115Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>In this article I will try to solve <strong>Best Time to Buy and Sell Stock</strong> series problem, including <strong>Best Time to Buy and Sell Stock I, II, III, IV</strong> and <strong>with Cooldown.</strong> Most of them are solved by <strong>dynamic programming</strong> and I will focus on construct transition equation and dimension reduction.  </p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>The description of <strong>Best Time to Buy and Sell Stock I</strong> is:</p><p>Say you have an array for which the $i^{th}$ element is the price of a given stock on day $i$.</p><p>If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.</p><p>Note that you cannot sell a stock before you buy one.</p><p>Example:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [<span class="number">7</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">4</span>]</span><br><span class="line">Output: <span class="number">5</span></span><br><span class="line">Explanation: Buy on day <span class="number">2</span> (price = <span class="number">1</span>) <span class="keyword">and</span> sell on day <span class="number">5</span> (price = <span class="number">6</span>), profit = <span class="number">6</span><span class="number">-1</span> = <span class="number">5.</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Solution-of-Problem-I"><a href="#Solution-of-Problem-I" class="headerlink" title="Solution of Problem I"></a>Solution of Problem I</h3><p>A simple idea is using <code>dp[i]</code> as <strong>the most profit buying in $i^{th}$ day.</strong> Then the transition equation will be <code>dp[i] = max(prices[j] - prices[i]) for all j &gt; i</code> and the soluton is <code>max(dp)</code>. It will be an $O(n^2)$ algorithm. But there is a waste of computation in this method. We suppose $j$ is the specific day that  <code>dp[i] = prices[j] - prices[i]</code>, then if there is a $k$ makes $dp[k] &lt; dp[i]$ and $k &gt; i$, then we have</p><script type="math/tex; mode=display">dp[k] = max(prices[l] - prices[i]) > prices[j] - prices[k] > dp[i].</script><p>So the soluton won’t be <code>dp[i]</code>. Under this circumstance, we cam simplify our algorithm by <strong>always searching lower price day as buying day</strong>, record the current price minus buying day price(<strong>the lowest price before/on current $i^{th}$ day</strong>) and generate a sequence of profit. The <code>profit[i]</code> means the difference between $i^{th}$ day price and the lowest price before/on $i^{th}$ day. So <code>max(profit)</code> will be the solution. By doing so, we reduce the method into $O(n)$ time. Here is the cpp code.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(prices.empty()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> buy = prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> maxPro = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> price:prices)&#123;</span><br><span class="line">            <span class="keyword">if</span>(price &lt; buy)&#123;</span><br><span class="line">                buy = price;</span><br><span class="line">            &#125;</span><br><span class="line">            maxPro = max(maxPro, price-buy);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxPro;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Solution-of-Problem-II"><a href="#Solution-of-Problem-II" class="headerlink" title="Solution of Problem II"></a>Solution of Problem II</h3><p>In problem II, we have not the transaction number limitation, <strong>we can buy/sell any times.</strong> When we try to using the <code>dp[i]</code> as above, we find that it’s hard to build a transition equation because we don’t know how many transaction times there will be. We have to change our state description. We have <strong>only three actions</strong> in a day, buying, selling and doing nothing, so we can use two states to describe a day, i.e. <strong>a day with stock</strong> and <strong>a day without stock</strong>. Let <code>nohold[i]</code> be the maximal profit when we have not stock in $i^{th}$ day, <code>hold[i]</code> be the maximal profit when we have stock. Then the transition equation will be</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hold[i] = max(hold[i<span class="number">-1</span>], nohold[i<span class="number">-1</span>] - prices[i]);</span><br><span class="line">nohold[i] = max(hold[i<span class="number">-1</span>] + prices[i], nohold[i<span class="number">-1</span>]);</span><br></pre></td></tr></table></figure><p>That simply means if we have stock in $i^{th}$ day, the stock can be bought today or we already have it yesterday and if we have stock in $i^{th}$ day, the stock can be sold today or yesterday or before. By this equation, we can solve this problem in one pass. Don’t forget the initialization <code>nohold[0] = -prices[0]</code>.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(prices.empty()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nohold(prices.size(), <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; hold(prices.size(), <span class="number">0</span>);</span><br><span class="line">        hold[<span class="number">0</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.size(); i++)&#123;</span><br><span class="line">            hold[i] = max(hold[i<span class="number">-1</span>], nohold[i<span class="number">-1</span>] - prices[i]);</span><br><span class="line">            nohold[i] = max(hold[i<span class="number">-1</span>] + prices[i], nohold[i<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nohold[nohold.size()<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>There is another solution <strong>do not use DP.</strong> A trivial idea is that we buy all the stock at the begin of an <strong>increasing line</strong> and sell it at the end of line, we can get the most profit.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maximal = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(prices[i] &gt; prices[i<span class="number">-1</span>]) maximal += prices[i] - prices[i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maximal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Soluton-of-III-amp-IV"><a href="#Soluton-of-III-amp-IV" class="headerlink" title="Soluton of III &amp; IV"></a>Soluton of III &amp; IV</h3><p>Problem III is a special case of Problem IV, so we just introduce Problem IV. In Problem IV, we have a limitation that <strong>we can only buy $k$ times($k$ is given).</strong> It can be solved simply like the DP algorithm of Problem II. We can use similar state description and just increase a dimension of <strong>transaction times.</strong> Let <code>hold[i][j]</code> as the maximal profit when we have stock and $j$ transitions on $i^{th}$ day and <code>nohold[i][j]</code> as the maximal profit when we have no stock and have  $j$ transitions on $i^{th}$ day. Also like Problem II, the transition equation can be written as</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hold[i][j] = max(hold[i<span class="number">-1</span>][j], nohold[i<span class="number">-1</span>][j<span class="number">-1</span>] - prices[i]);</span><br><span class="line">nohold[i][j] = max(nohold[i<span class="number">-1</span>][j], hold[i<span class="number">-1</span>][j] + prices[i]);</span><br></pre></td></tr></table></figure><p>The solution will be <code>nohold[n-1][k-1]</code>. What need to be mentioned is that <strong>we counting transaction by counting buying numbers but not selling.</strong> Then it’s a one-pass method.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span> k, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(prices.empty() || k==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = prices.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; hold(n, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(k, <span class="number">0</span>)), nohold(n, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(k, <span class="number">0</span>));</span><br><span class="line">        <span class="comment">//hold[0][0] = -prices[0];</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(j &gt; <span class="number">0</span>)</span><br><span class="line">                        hold[i][j] = max(hold[i<span class="number">-1</span>][j], nohold[i<span class="number">-1</span>][j<span class="number">-1</span>] - prices[i]);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        hold[i][j] = max(hold[i<span class="number">-1</span>][j], -prices[i]);</span><br><span class="line">                    nohold[i][j] = max(nohold[i<span class="number">-1</span>][j], hold[i<span class="number">-1</span>][j] + prices[i]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> hold[i][j] = -prices[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nohold[n<span class="number">-1</span>][k<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>But the code <strong>did not pass!</strong> We got a <strong>Memory Limit Exceeded.</strong> So I start to reduce the dimension of the equation. Obviously, both <code>hold[i][j]</code> and <code>nohold[i][j]</code> have only relationship with <code>hold[i-1][*]</code> and <code>nohold[i-1][*]</code>. So we can just reduce it as</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hold[j] = max(hold[j], nohold[j<span class="number">-1</span>] - prices[i]);</span><br><span class="line">nohold[j] = max(nohold[j], hold[j] + prices[i]);</span><br></pre></td></tr></table></figure><p>Also, using a <strong>sentinel $0$ in nohold[j]</strong> can make code looks better(reduce the number of $if$). So we get the code like this.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span> k, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(prices.empty() || k==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = prices.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; hold(k, INT_MIN), nohold(k+<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        hold[<span class="number">0</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k; j++)&#123;</span><br><span class="line">                    hold[j] = max(hold[j], nohold[j] - prices[i]);</span><br><span class="line">                    nohold[j+<span class="number">1</span>] = max(nohold[j+<span class="number">1</span>], hold[j] + prices[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nohold[k];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>~Ok, we have already solved it!~ Wait, it’s still <strong>Memory Limit Exceeded!</strong> But why? If we consider a super large $k$ that the limitation is meaningless to the problem, the problem <strong>reduces into Problem II.</strong> But the time complexity of our solution will still be $O(k*\dot n)$, which is a super large number especially comparing with $O(n)$ solution in Problem II. We can solve this by a simple $if$ sentence.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(k &gt; n/<span class="number">2</span>)&#123;</span><br><span class="line">  <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.size(); i++)</span><br><span class="line">    res = max(res, res + prices[i]-prices[i<span class="number">-1</span>]);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And here is the whole program of Problem IV.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span> k, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(prices.empty() || k==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = prices.size();</span><br><span class="line">        <span class="keyword">if</span>(k &gt; n/<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.size(); i++)</span><br><span class="line">                res = max(res, res + prices[i]-prices[i<span class="number">-1</span>]);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; hold(k, INT_MIN), nohold(k+<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        hold[<span class="number">0</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k; j++)&#123;</span><br><span class="line">                    hold[j] = max(hold[j], nohold[j] - prices[i]);</span><br><span class="line">                    nohold[j+<span class="number">1</span>] = max(nohold[j+<span class="number">1</span>], hold[j] + prices[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nohold[k];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Solution-of-Problem-with-Cooldown"><a href="#Solution-of-Problem-with-Cooldown" class="headerlink" title="Solution of Problem with Cooldown"></a>Solution of Problem <strong>with Cooldown</strong></h3><p>Cooldown means we have to ~have relax and take a coffee~ the day after selling. <strong>Buying the day after a selling is not allowed.</strong> That means our states description above can not be used again…Of course not! We can just do a little modification, adding a new vector called <code>cooldown[i]</code> means the maximal profit when we <strong>just sell or do nothing</strong> on the $i^{th}$ day. We have <code>have_stock[i]</code> and <code>have_no_stock[i]</code> as above. We can find the transition of cooldown like <code>cooldown[i] = max(hold_no_stock[i-1], hold_stock[i-1] + prices[i])</code> which means today we sell the stock or do nothing. The transition of hold_stock is still <code>hold_stock[i] = max(hold_stock[i-1], hold_no_stock[i-1] - prices[i])</code> because cooldown doesn’t influence buying. Finally the transition equation pf <code>hold_no_stock[i]</code> can be <code>hold_no_stock[i] = max(hold_no_stock[i-1], cooldown[i-1])</code>, meaning that today is a <strong>cooldown day or no stock day.</strong> Combine them together we have_stock</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hold_no_stock[i] = max(hold_no_stock[i<span class="number">-1</span>], cooldown[i<span class="number">-1</span>]);</span><br><span class="line">hold_stock[i] = max(hold_stock[i<span class="number">-1</span>], hold_no_stock[i<span class="number">-1</span>] - prices[i]);</span><br><span class="line">cooldown[i] = max(hold_no_stock[i<span class="number">-1</span>], hold_stock[i<span class="number">-1</span>] + prices[i]);</span><br></pre></td></tr></table></figure><p>Don’t forget the initialization <code>hold_stock[0] = -prices[0]; cooldown[0] = INT_MIN;</code>. It’s also a $O(n)$ one-pass method now. In conclusion, all these kind of problem can be solved by dynamic programming idea and the basic idea is to form transition equation. <strong>The number of variables or the number of dimensions are equivalent</strong> in constructing equation. So if you have not idea how to form the equation, including the variable number of state will be a good choice.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(prices.empty()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = prices.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; hold_stock(n, <span class="number">0</span>), hold_no_stock(n, <span class="number">0</span>), cooldown(n, <span class="number">0</span>);</span><br><span class="line">        hold_stock[<span class="number">0</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        cooldown[<span class="number">0</span>] = INT_MIN;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">            hold_no_stock[i] = max(hold_no_stock[i<span class="number">-1</span>], cooldown[i<span class="number">-1</span>]);</span><br><span class="line">            hold_stock[i] = max(hold_stock[i<span class="number">-1</span>], hold_no_stock[i<span class="number">-1</span>] - prices[i]);</span><br><span class="line">            cooldown[i] = max(hold_no_stock[i<span class="number">-1</span>], hold_stock[i<span class="number">-1</span>] + prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max(cooldown[cooldown.size()<span class="number">-1</span>], hold_no_stock[hold_no_stock.size()<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;&lt;p&gt;In this article I will try to solve &lt;strong&gt;Best Time to Buy and Sell Stock&lt;/strong&gt; series problem, including &lt;strong&gt;Best Time to Buy and Sell Stock I, II, III, IV&lt;/strong&gt; and &lt;strong&gt;with Cooldown.&lt;/strong&gt; Most of them are solved by &lt;strong&gt;dynamic programming&lt;/strong&gt; and I will focus on construct transition equation and dimension reduction.  &lt;/p&gt;
&lt;h3 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h3&gt;&lt;p&gt;The description of &lt;strong&gt;Best Time to Buy and Sell Stock I&lt;/strong&gt; is:&lt;/p&gt;
&lt;p&gt;Say you have an array for which the $i^{th}$ element is the price of a given stock on day $i$.&lt;/p&gt;
&lt;p&gt;If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.&lt;/p&gt;
&lt;p&gt;Note that you cannot sell a stock before you buy one.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: [&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: Buy on day &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; (price = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; sell on day &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; (price = &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;), profit = &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;5.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="https://erebos.top/categories/Leetcode/"/>
    
    
      <category term="Algorithm" scheme="https://erebos.top/tags/Algorithm/"/>
    
      <category term="Dynamic Programming" scheme="https://erebos.top/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Solution: #300 Longest Increasing Subsequence</title>
    <link href="https://erebos.top/2019/09/01/LeetCode-Solution-300-Longest-Increasing-Subsequence/"/>
    <id>https://erebos.top/2019/09/01/LeetCode-Solution-300-Longest-Increasing-Subsequence/</id>
    <published>2019-09-01T04:07:18.000Z</published>
    <updated>2019-10-05T23:35:09.114Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>In this article I will describe two <strong>dynamic programming</strong> algorithms solving LIS problem and <strong>STL functions</strong> <code>lower_bound()</code> and <code>upper_bound()</code>.</p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>Given an unsorted array of integers, find the length of longest increasing subsequence.<br>Example:</p><blockquote><p>Input: $[10,9,2,5,3,7,101,18]$<br>Output: 4<br>Explanation: The longest increasing subsequence is $[2,3,7,101]$, therefore the length is $4$.</p></blockquote><a id="more"></a><h3 id="O-n-2-Dynamic-Programming-Solution"><a href="#O-n-2-Dynamic-Programming-Solution" class="headerlink" title="$O(n^2)$ Dynamic Programming Solution"></a>$O(n^2)$ Dynamic Programming Solution</h3><p>Here is a trivial description that <code>dp[i]</code> means the length of longest increasing subsequence <strong>with $i^{th}$ element.</strong> Also, we can find easily that the value of <code>dp[i]</code> can be determined by all increasing subsequence with $j &lt; i$ that <strong>maintain increasing property</strong> with $i^{th}$ value. Mathematically, <code>dp[i]</code> is determined by all the value <code>dp[j]</code> with $j &lt; i$ and $nums[i] &gt; nums[j]$ which <code>nums</code> is the input vector. So the state transition equation is</p><blockquote><p>dp[i] = max(dp[j]) + 1 with j &lt; i, nums[j] &lt; nums[i]</p></blockquote><p>This method need two iterations so it’s a $O(n^2)$ algorithm.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLIS</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp(n, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> maximal = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">                <span class="keyword">if</span>(nums[j] &lt; nums[i])</span><br><span class="line">                    maximal = max(maximal, dp[j]);</span><br><span class="line">            dp[i] = maximal + <span class="number">1</span>;</span><br><span class="line">            ret = max(ret, dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="O-nlgn-Dynamic-Programming-Solution"><a href="#O-nlgn-Dynamic-Programming-Solution" class="headerlink" title="$O(nlgn)$ Dynamic Programming Solution"></a>$O(nlgn)$ Dynamic Programming Solution</h3><p>Comparing all optimal subsequences with the same length, the one <strong>with least last number</strong> will confirm that when a new number is added in, the new subsequence will still optimal. For example, for subsequence $[1,3,5,2,7,4,5]$, we have two subsequences length $4$:</p><script type="math/tex; mode=display">[1,3,5,7], [1,2,4,5]</script><p>Then we add $6$ into the sequence, the first subsequence is still $[1,3,5,7]$ when the second one becomes $[1,2,4,5,6]$.</p><p>But how to guarantee that the subsequence has the least last number? We can do so by replacing the number <strong>just larger than the new number</strong> with the new number. It’s because the replacement won’t change the length of the subsequence but will decrease the number value generally.<br>There is a very great property that the increasing subsequences are ‘increasing’, which means that given a increasing subsequence and a new number, we can find the <strong>correct position</strong> of the new number in the subsequence in only $O(lgn)$ time. We can generate a new largest increasing subsequence including the new number by <strong>adding the new number</strong> if it’s larger than all numbers in the subsequence and do replacing if not. The whole time complexity will be $O(nlgn)$.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLIS</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">auto</span> it = lower_bound(dp.begin(), dp.end(), nums[i]);</span><br><span class="line">            <span class="keyword">if</span>(it == dp.end()) dp.push_back(nums[i]);</span><br><span class="line">            <span class="keyword">else</span> *it = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="lower-bound-and-upper-bound-in-STL"><a href="#lower-bound-and-upper-bound-in-STL" class="headerlink" title="lower_bound and upper_bound in STL"></a><code>lower_bound</code> and <code>upper_bound</code> in STL</h3><p>We can mention that I use <code>lower_bound</code> function in the previous code. It’s a binary search function in STL. Both it ans <code>upper_bound</code> use binary search and return a position of a vector. The difference is that <code>lower_bound</code> return the position of the first number larger than <strong>or equals to</strong> the target and <code>upper_bound</code> return the position of the first number <strong>strictly</strong> larger than the target. There are three parameters in both functions. The first parameter is a Iterator refers to the search begin position, the second parameter is a Iterator refers to the end position and the third parameter is target number. Here is the source code of <code>lower_bound</code>.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">ForwardIterator</span>, <span class="title">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">ForwardIterator</span> <span class="title">lower_bound</span> (<span class="title">ForwardIterator</span> <span class="title">first</span>, <span class="title">ForwardIterator</span> <span class="title">last</span>, <span class="title">const</span> <span class="title">T</span>&amp; <span class="title">val</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  ForwardIterator it;</span><br><span class="line">  iterator_traits&lt;ForwardIterator&gt;::difference_type count, step;</span><br><span class="line">  count = distance(first,last);</span><br><span class="line">  <span class="keyword">while</span> (count&gt;<span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    it = first; step=count/<span class="number">2</span>; advance (it,step);</span><br><span class="line">    <span class="keyword">if</span> (*it&lt;val) &#123;                 <span class="comment">// or: if (comp(*it,val)), for version (2)</span></span><br><span class="line">      first=++it;</span><br><span class="line">      count-=step+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> count=step;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> first;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>What should be mentioned is that <strong>the begin position will be included but the end position won’t be included.</strong> The function uses <strong>binary search</strong>, so the time complexity is $O(lgn)$ where $n$ is the size between two pointers.</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;&lt;p&gt;In this article I will describe two &lt;strong&gt;dynamic programming&lt;/strong&gt; algorithms solving LIS problem and &lt;strong&gt;STL functions&lt;/strong&gt; &lt;code&gt;lower_bound()&lt;/code&gt; and &lt;code&gt;upper_bound()&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h3&gt;&lt;p&gt;Given an unsorted array of integers, find the length of longest increasing subsequence.&lt;br&gt;Example:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Input: $[10,9,2,5,3,7,101,18]$&lt;br&gt;Output: 4&lt;br&gt;Explanation: The longest increasing subsequence is $[2,3,7,101]$, therefore the length is $4$.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="https://erebos.top/categories/Leetcode/"/>
    
    
      <category term="STL" scheme="https://erebos.top/tags/STL/"/>
    
      <category term="Algorithm" scheme="https://erebos.top/tags/Algorithm/"/>
    
      <category term="Dynamic Programming" scheme="https://erebos.top/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode Solution: #146 LRUcache</title>
    <link href="https://erebos.top/2019/08/28/Leetcode-Solution-LRUcache/"/>
    <id>https://erebos.top/2019/08/28/Leetcode-Solution-LRUcache/</id>
    <published>2019-08-28T10:25:14.000Z</published>
    <updated>2019-10-05T23:35:25.697Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>Design and implement a data structure for <strong>Least Recent Used(LRU) cache</strong>. It should support the following operations: <code>get</code> and <code>put</code>.</p><p><code>get(key)</code> -Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.<br><code>put(key, value)</code> -Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.</p><p>The cache is initialized with a <strong>positive</strong> capacity.</p><h3 id="Basic-Idea"><a href="#Basic-Idea" class="headerlink" title="Basic Idea"></a>Basic Idea</h3><p>To solve this problem, we need to design a kind of data structure with the properties as follow:</p><ol><li>The data structure can visit the and set/insert the item as soon as possible(such as <strong>vector or map</strong>).</li><li>The data structure can order the data <strong>by the operation time.</strong></li><li>The data structure can quickly check for the <strong>overflow of capacity.</strong></li></ol><p>Due to the data structure in different language is not the same, I will choose <strong>python</strong> and <strong>cpp</strong> as my solution language.<br><a id="more"></a></p><h3 id="Python-solution"><a href="#Python-solution" class="headerlink" title="Python solution"></a>Python solution</h3><p>I will introduce a kind of python data structure called <strong>OrderedDict</strong>. This is a kind of dictionary(in fact it is inherited from ‘dictionary’ of python) with the order of insertion time. Python uses an extra <strong>circular linked list</strong> to save the node as form $[PREV, NEXT, KEY]$ to realize the data structure. Obviously, this data structure is perfectly suitable for our problem.</p><p>The only problem we need to solve is the question is to find a data structure ordering by <strong>operation time</strong> but not the <strong>insertion time</strong>. So we just need to simply <strong>delete and insert</strong> every operation to solve this problem.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span>:</span></span><br><span class="line">    <span class="keyword">import</span> collections</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, capacity: int)</span>:</span></span><br><span class="line">        self.capacity = capacity</span><br><span class="line">        self.cache = collections.OrderedDict()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, key: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> self.cache:</span><br><span class="line">            ret = self.cache[key]</span><br><span class="line">            <span class="keyword">del</span> self.cache[key]</span><br><span class="line">            self.cache[key] = ret</span><br><span class="line">            <span class="keyword">return</span> ret</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, key: int, value: int)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> self.cache:</span><br><span class="line">            <span class="keyword">del</span> self.cache[key]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.capacity == len(self.cache):</span><br><span class="line">          <span class="comment">#This for iteration is to visit the first value of cache.</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> self.cache.keys():</span><br><span class="line">                <span class="keyword">del</span> self.cache[i]</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        self.cache[key] = value</span><br><span class="line"><span class="comment"># Your LRUCache object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = LRUCache(capacity)</span></span><br><span class="line"><span class="comment"># param_1 = obj.get(key)</span></span><br><span class="line"><span class="comment"># obj.put(key,value)</span></span><br></pre></td></tr></table></figure><h3 id="Cpp-solution-using-STL-container"><a href="#Cpp-solution-using-STL-container" class="headerlink" title="Cpp solution(using STL container)"></a>Cpp solution(using STL container)</h3><p>CPP provides many kinds of STL containers, but there are nothing like the ‘OrderedDict’ in python. The design idea is to <strong>combine two or more kinds of containers</strong>(like the OrderedDict source code do). If we want to build a structure with <strong>insertion order</strong>, stack will be a first choice. But what we also want is to <strong>keep the high speed of insertion and deletion</strong> of map/vector, which will conflict with stack’s properties that we can not move/delete a node in the middle of a stack. Therefore, <strong>Linked List</strong>(in STL is list) will be a great choice, which also matches python’s choice. To keep the order of operation time, the problem we need to solve can be as follow:</p><ol><li>We need a fast way to <strong>visit/insert/delete</strong> a node in linked list <strong>given key</strong>.</li><li>We need a fast way to <strong>move a node to the front</strong> of linked list after every operation.</li><li>When we get the first value of linked list, we need a fast way to <strong>delete the pair in map/vector.</strong></li></ol><p>These properties keeps a linked list by operation time order with short modifying time. Actually, property $1$ and $2$ can be combined due to the property of Linked List. Map can be a good way to satisfy property $1$ and $2$. We can use <strong>map(key, node)</strong> form to visit a linked list node quickly in $O(1)$ time. About property $3$, we need a <strong>reverse_map(value, key)</strong> to fast delete corresponding pair in map. We just need to delete <strong>reverse_map[node.value]</strong> in map. But it’s not convenient and cost extra space. We can just store <strong>node(value, key)</strong> in linked list to do the same thing.</p><p>In conclusion, what we need is to combine a <strong>map</strong>(or unordered_map) and a <strong>list.</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    LRUCache(<span class="keyword">int</span> capacity) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;cache = <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">list</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;::iterator&gt;();</span><br><span class="line">        <span class="keyword">this</span>-&gt;linkedlist = <span class="built_in">list</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;();</span><br><span class="line">        <span class="keyword">this</span>-&gt;cap = capacity;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> it = cache.find(key);</span><br><span class="line">        <span class="keyword">if</span>(it != cache.end())&#123;</span><br><span class="line">            linkedlist.splice(linkedlist.begin(), linkedlist, it-&gt;second);</span><br><span class="line">            <span class="keyword">return</span> it-&gt;second-&gt;second;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> it = cache.find(key);</span><br><span class="line">        <span class="keyword">if</span>(it != cache.end())</span><br><span class="line">            linkedlist.erase(it-&gt;second);</span><br><span class="line">        linkedlist.push_front(&#123;key, value&#125;);</span><br><span class="line">        cache[key] = linkedlist.begin();</span><br><span class="line">        <span class="keyword">if</span>(cache.size() &gt; cap)&#123;</span><br><span class="line">            <span class="keyword">int</span> key_recent = linkedlist.back().first;</span><br><span class="line">            cache.erase(key_recent);</span><br><span class="line">            linkedlist.pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">list</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;::iterator&gt; cache;</span><br><span class="line">    <span class="built_in">list</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; linkedlist;</span><br><span class="line">    <span class="keyword">int</span> cap;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>There are also some tricky cases like we need to <strong>check for if key in the cache first</strong> because change a value in cache need to delete the value first and then insert a new one.</p><p>The combination of STL containers is not the only way to solve this problem. Actually many artificial data structures have better performance. A specific example is using <strong>circular linked list nodes</strong> just like python do in the ‘OrderedDict’. I won’t cover this method here and you can find related articles easily.</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h3&gt;&lt;p&gt;Design and implement a data structure for &lt;strong&gt;Least Recent Used(LRU) cache&lt;/strong&gt;. It should support the following operations: &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;put&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;get(key)&lt;/code&gt; -Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.&lt;br&gt;&lt;code&gt;put(key, value)&lt;/code&gt; -Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.&lt;/p&gt;
&lt;p&gt;The cache is initialized with a &lt;strong&gt;positive&lt;/strong&gt; capacity.&lt;/p&gt;
&lt;h3 id=&quot;Basic-Idea&quot;&gt;&lt;a href=&quot;#Basic-Idea&quot; class=&quot;headerlink&quot; title=&quot;Basic Idea&quot;&gt;&lt;/a&gt;Basic Idea&lt;/h3&gt;&lt;p&gt;To solve this problem, we need to design a kind of data structure with the properties as follow:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The data structure can visit the and set/insert the item as soon as possible(such as &lt;strong&gt;vector or map&lt;/strong&gt;).&lt;/li&gt;
&lt;li&gt;The data structure can order the data &lt;strong&gt;by the operation time.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;The data structure can quickly check for the &lt;strong&gt;overflow of capacity.&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Due to the data structure in different language is not the same, I will choose &lt;strong&gt;python&lt;/strong&gt; and &lt;strong&gt;cpp&lt;/strong&gt; as my solution language.&lt;br&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="https://erebos.top/categories/Leetcode/"/>
    
    
      <category term="STL" scheme="https://erebos.top/tags/STL/"/>
    
      <category term="Data Structure" scheme="https://erebos.top/tags/Data-Structure/"/>
    
      <category term="Cpp" scheme="https://erebos.top/tags/Cpp/"/>
    
      <category term="Python" scheme="https://erebos.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode Solution: #142 Linked List Circle</title>
    <link href="https://erebos.top/2019/08/27/Leetcode-Solution-Linked-List-Circle-0/"/>
    <id>https://erebos.top/2019/08/27/Leetcode-Solution-Linked-List-Circle-0/</id>
    <published>2019-08-27T06:07:05.000Z</published>
    <updated>2019-11-03T22:40:44.545Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>Given a linked list and return where the circle begins. For example, a linked list $[3, 2, 0, 4]$ having circle $[2, 0, 4]$ is shown below.</p><p><img src="https://raw.githubusercontent.com/hongxin-y/picture4blog/master/linked_circle.png?token=AKSH2L5CED5EO3FVD4ZH5425ZCI6Q" alt="Linked_circle"></p><p>The algorithm should return the second node. I use C++ to solve this problem and define the node as below.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Definition for singly-linked list.</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> &#123;</span></span><br><span class="line">     <span class="keyword">int</span> val;</span><br><span class="line">     ListNode *next;</span><br><span class="line">     ListNode(<span class="keyword">int</span> x) : val(x), next(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Solution-1-hashset"><a href="#Solution-1-hashset" class="headerlink" title="Solution 1: hashset"></a>Solution 1: hashset</h3><p>A trivial idea to solve this problem is saving the node information in a hashset when traversing and find if there is a visited node.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">detectCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        ListNode *cur = head;</span><br><span class="line">        <span class="built_in">unordered_set</span>&lt;ListNode*&gt; storage;</span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (storage.find(cur)!=storage.end())&#123;</span><br><span class="line">                <span class="keyword">return</span> cur;</span><br><span class="line">            &#125;</span><br><span class="line">            storage.insert(cur);</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>This is a method with O(n) time complexity and O(n) space complexity. But if there is a method to solve this problem with O(1) space complexity?</p><h3 id="Solution-2-fast-and-slow-pointers"><a href="#Solution-2-fast-and-slow-pointers" class="headerlink" title="Solution 2: fast and slow pointers"></a>Solution 2: fast and slow pointers</h3><p>Set two pointers which slower one move one time one step and faster one move one time two steps. Once they meet, <strong>reset the faster one to the head pointer</strong>, then finally they will meet in the begin node of circle. This is an algorithm without extra space. But why it works?</p><p>There is a mathematical idea. Suppose the distance from head node to the begin of circle is $x_1$, the distance from begin of circle and meeting point on the circle is $x_2$, the distance from meeting point back to the begin of the circle is $x_3$. Then there is the velocity equation.</p><script type="math/tex; mode=display">2*((x_1 + x_2) + k_1(x_2+x_3)) = (x_1 + x_2) + k_2 (x_2+x_3)</script><script type="math/tex; mode=display">-> x_1 + x_2 = (k_2 - 2*k_1 - 1)(x_2 + x_3)</script><script type="math/tex; mode=display">-> (x_2 + x_3)|(x_1 + x_2)</script><p>It means that the difference between $x_3$ and $x_1$ is the multiple of circle length. Due to the definition of $x_3$ and $x_1$, if the fast pointer move from the head node when the slow pointer move from the meeting point, <strong>finally the slow pointer and fast pointer will meet on the begin of the circle.</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">detectCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">NULL</span> || head-&gt;next == <span class="literal">NULL</span> || head-&gt;next-&gt;next == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        ListNode* fast = head-&gt;next-&gt;next;</span><br><span class="line">        ListNode* slow = head-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(fast != slow)&#123;</span><br><span class="line">            <span class="keyword">if</span>(fast-&gt;next == <span class="literal">NULL</span> || fast-&gt;next-&gt;next == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        fast = head;</span><br><span class="line">        <span class="keyword">while</span>(fast != slow)&#123;</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Don’t forget the special cases of NULL pointer and if fast pointer move to NULL means <strong>there is no circle.</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h3&gt;&lt;p&gt;Given a linked list and return where the circle begins. For example, a linked list $[3, 2, 0, 4]$ having circle $[2, 0, 4]$ is shown below.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/hongxin-y/picture4blog/master/linked_circle.png?token=AKSH2L5CED5EO3FVD4ZH5425ZCI6Q&quot; alt=&quot;Linked_circle&quot;&gt;&lt;/p&gt;
&lt;p&gt;The algorithm should return the second node. I use C++ to solve this problem and define the node as below.&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Definition for singly-linked list.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ListNode&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     ListNode *next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     ListNode(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x) : val(x), next(&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="https://erebos.top/categories/Leetcode/"/>
    
    
      <category term="Algorithm" scheme="https://erebos.top/tags/Algorithm/"/>
    
  </entry>
  
</feed>
